from django.shortcuts import render, redirect
from django.contrib import messages
from django.db import transaction
from django.contrib.auth.decorators import login_required
import requests

from core.models import TgUser
from .forms import SubscribeForm

TOKEN = "5360985085:AAEx-eXJ2WHsHXLMZzBPxWhBNbJNU77wKyQ"
BASE_URL = f"https://api.telegram.org/bot{TOKEN}/"


@login_required
def subscribe_on_events(request):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user = request.user
    tg_user = TgUser.objects.filter(user=user).first()
    is_subscribed = tg_user.is_subscribed if tg_user else False
    if request.method == 'POST':
        form = SubscribeForm(request.POST)
        if form.is_valid():
            tg_id = form.cleaned_data['tg_id']
            with transaction.atomic():
                if not tg_user:
                    tg_user = TgUser(user=user, tg_id=tg_id, is_subscribed=True)
                else:
                    tg_user.tg_id = tg_id
                    tg_user.is_subscribed = True
                tg_user.save()
                messages.success(request, "–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏/–æ–±–Ω–æ–≤–∏–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç")
            return redirect('subscribe_on_events')
        else:
            messages.error(request, "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π id")
    else:
        form = SubscribeForm()

    return render(request, "subscribe_on_events.html", {
        "form": form, "tg_user": tg_user, "is_subscribed": is_subscribed
    })


@login_required
def unsubscribe_from_events(request):
    """–û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –±–æ—Ç–∞"""
    user = request.user
    tg_user = TgUser.objects.filter(user=user).first()
    is_subscribed = False

    if not tg_user:
        messages.error(request, "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Å–≤–æ–π Telegram –∞–∫–∫–∞—É–Ω—Ç")
    else:
        tg_user.is_subscribed = False
        tg_user.save()
        messages.success(request, "–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")

    return render(request, "subscribe_on_events.html", {
        "tg_user": tg_user,
        "is_subscribed": is_subscribed,
    })


def send_messages(text, tg_user_id):  # pragma: no cover
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–≤–µ—Ä—à–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç API"""
    response = requests.post(
        BASE_URL + "sendMessage", data={"chat_id": tg_user_id, "text": text}
    )
    return response.json()


"""–û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""


def task_added_message(tg_user_id, board_name, col_name, task_name):  # pragma: no cover
    send_messages(
        f"‚ûï –ù–∞ –¥–æ—Å–∫–µ {board_name} –≤ —Å—Ç–æ–ª–±—Ü–µ {col_name} —Å–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ '{task_name}'",
        tg_user_id,
    )


def task_updated_message(tg_user_id, board_name, col_name):  # pragma: no cover
    send_messages(
        f"üîµ –ù–∞ –¥–æ—Å–∫–µ {board_name} –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ {col_name}", tg_user_id
    )


def task_deleted_message(tg_user_id, board_name, col_name):  # pragma: no cover
    send_messages(
        f"‚ùå –ù–∞ –¥–æ—Å–∫–µ {board_name} —É–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –≤ —Å—Ç–æ–ª–±—Ü–µ {col_name}", tg_user_id
    )


def col_added_message(tg_user_id, board_name, col_name):  # pragma: no cover
    send_messages(f"‚ûï –ù–∞ –¥–æ—Å–∫–µ {board_name} –¥–æ–±–∞–≤–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü {col_name}", tg_user_id)


def col_deleted_message(tg_user_id, board_name, col_name):  # pragma: no cover
    send_messages(f"‚ùå –ù–∞ –¥–æ—Å–∫–µ {board_name} —É–¥–∞–ª–µ–Ω —Å—Ç–æ–ª–±–µ—Ü {col_name}", tg_user_id)


def collaborator_added_message(tg_user_id, board_name, user_name):  # pragma: no cover
    send_messages(
        f"‚ûï –ù–∞ –¥–æ—Å–∫—É {board_name} –¥–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ {user_name}", tg_user_id
    )


def collaborator_deleted_message(tg_user_id, board_name, user_name):  # pragma: no cover
    send_messages(f"‚ùå –° –¥–æ—Å–∫–∏ {board_name} —É–¥–∞–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫ {user_name}", tg_user_id)


def as_collaborator_added_message(tg_user_id, board_name):  # pragma: no cover
    send_messages(f"‚ûï –í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –¥–æ—Å–∫—É {board_name}", tg_user_id)


def board_deleted_message(tg_user_id, board_name):  # pragma: no cover
    send_messages(f"‚ùå –î–æ—Å–∫–∞ {board_name} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞", tg_user_id)


def task_moved_message(tg_user_id, board_name, task_name, col_name):  # pragma: no cover
    send_messages(
        f"üîµ –ù–∞ –¥–æ—Å–∫–µ {board_name} –≤ –∫–æ–ª–æ–Ω–∫—É {col_name} –±—ã–ª–∞ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –∑–∞–¥–∞—á–∞ {task_name}",
        tg_user_id,
    )


def board_edit_message(tg_user_id, board_name, user_name):  # pragma: no cover
    send_messages(
        f"üîµ –î–æ—Å–∫–∞ {board_name} –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_name}",
        tg_user_id,
    )


def column_edit_message(tg_user_id, board_name, col_name, user_name):  # pragma: no cover
    send_messages(
        f"üîµ –ù–∞ –¥–æ—Å–∫–µ {board_name} –±—ã–ª–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ {col_name} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_name}",
        tg_user_id,
    )


def task_deadline_message(tg_user_id, board_name, col_name, task_name):  # pragma: no cover
    send_messages(
        f"üîµ –ù–∞ –¥–æ—Å–∫–µ {board_name} –≤ –∫–æ–ª–æ–Ω–∫–µ {col_name} –∑–∞–≤—Ç—Ä–∞ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ {task_name}",
        tg_user_id,
    )


def send_notification(tg_users: list, send_message, *params):  # pragma: no cover
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–µ"""
    for tg_user in tg_users:
        send_message(tg_user.tg_id, *params)
